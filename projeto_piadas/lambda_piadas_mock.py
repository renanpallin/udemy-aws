import json
import random

# Banco de piadas em cache (carregado uma vez por container Lambda)
PIADAS_POR_TEMA = {
    'programa√ß√£o': [
        "Por que os programadores preferem o modo escuro? Porque a luz atrai bugs!",
        "Como voc√™ chama um programador que n√£o comenta o c√≥digo? Um artista abstrato!",
        "Por que o programador foi ao m√©dico? Porque estava com bug!",
        "O que acontece quando voc√™ cruza um programador com um vampiro? Um c√≥digo que s√≥ funciona √† noite!",
        "Por que programadores odeiam natureza? Porque tem muitos bugs e nenhum debugger!"
    ],
    'javascript': [
        "Por que JavaScript √© t√£o confuso? Porque '1' + '1' √© '11', mas '1' - '1' √© 0!",
        "Por que JavaScript √© como um relacionamento complicado? Porque voc√™ nunca sabe se vai retornar undefined ou null!",
        "O que o programador JavaScript disse quando terminou o namoro? 'Isso √© undefined!'",
        "Por que arrays em JavaScript come√ßam em 0? Porque os programadores levaram 0 tempo para pensar nisso!",
        "Por que JavaScript foi ao psic√≥logo? Porque tinha problemas de closure!"
    ],
    'aws': [
        "Por que os desenvolvedores AWS dormem bem? Porque eles t√™m CloudWatch!",
        "O que o Lambda disse para o API Gateway? 'Voc√™ me completa... na requisi√ß√£o!'",
        "Por que S3 √© o melhor lugar para guardar segredos? Porque √© um bucket list infinito!",
        "Por que o DynamoDB nunca fica estressado? Porque ele escala automaticamente!",
        "O que o EC2 falou para o Lambda? 'Voc√™ √© serverless, mas eu sou timeless!'"
    ],
    'python': [
        "Por que Python foi ao psic√≥logo? Porque tinha problemas com indenta√ß√£o!",
        "O que o Python disse para o Java? 'Voc√™ tem muitas classes, mas eu tenho mais estilo!'",
        "Por que cobras Python s√£o boas programadoras? Porque elas n√£o precisam de ponto e v√≠rgula!",
        "Por que Python √© a linguagem mais zen? Porque 'import this' revela a filosofia!",
        "O que acontece quando Python encontra Java? Um caf√© com cobra!"
    ],
    'caf√©': [
        "Por que programadores bebem tanto caf√©? Porque sem ele, o c√≥digo fica em modo sleep!",
        "O que o caf√© falou para o programador? 'Sem mim, voc√™ √© s√≥ um coment√°rio!'",
        "Por que o caf√© √© como JavaScript? Porque ambos te mant√™m acordado a noite toda!",
        "Como o programador faz caf√©? Com Java, obviamente!",
        "Por que o caf√© nunca d√° erro? Porque ele sempre compila na primeira tentativa!"
    ],
    'trabalho': [
        "Por que o desenvolvedor levou uma escada para o trabalho? Porque queria subir de n√≠vel!",
        "O que o Scrum Master falou para a equipe? 'Vamos fazer um sprint... para o caf√©!'",
        "Por que a reuni√£o de daily foi cancelada? Porque ningu√©m tinha updates!",
        "Como se chama um desenvolvedor que trabalha de casa? Home office... ou home bug?",
        "Por que o c√≥digo review √© como terapia de casal? Porque sempre tem algu√©m apontando os problemas!"
    ],
    'geral': [
        "Por que o computador foi ao m√©dico? Porque tinha um v√≠rus!",
        "O que um byte disse para o outro? 'Voc√™ est√° OK?' 'N√£o, estou meio bit...'",
        "Por que os computadores nunca t√™m fome? Porque j√° v√™m com chips!",
        "Como se chama um computador que canta? Um Dell!",
        "Por que o mouse foi ao psic√≥logo? Porque estava com problemas de clique!"
    ]
}

def lambda_handler(event, context):
    print("üé≠ Iniciando gera√ß√£o de piada mock...")

    try:
        # GET: Pegar tema da query string
        query_params = event.get('queryStringParameters', {}) or {}
        tema = query_params.get('tema', 'geral')
        print(f"üîç Par√¢metros da query: {query_params}")

        # POST: Pegar tema do body JSON
        # body = json.loads(event.get('body', '{}'))
        # tema = body.get('tema', 'geral')
        # print(f"üìã Body da requisi√ß√£o: {body}")

        print(f"üéØ Tema solicitado: {tema}")

        # Busca piada aleat√≥ria do banco em cache
        piada = gerar_piada_mock(tema)

        print("‚úÖ Piada selecionada com sucesso!")

        return {
            'statusCode': 200,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'tema': tema,
                'piada': piada,
            }, ensure_ascii=False)
        }

    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")

        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({
                'erro': 'Erro ao gerar piada',
                'detalhes': str(e)
            })
        }

def gerar_piada_mock(tema):
    """Seleciona piada aleat√≥ria do banco em cache"""
    piadas_tema = PIADAS_POR_TEMA.get(tema.lower(), PIADAS_POR_TEMA['geral'])
    piada_selecionada = random.choice(piadas_tema)

    print(f"üé≠ Piada selecionada: {piada_selecionada[:30]}...")

    return piada_selecionada